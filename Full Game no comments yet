import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class BlackJackGame {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Card> deck = initializeDeck(); //declares the deck which can hold variables of type card
        Collections.shuffle(deck);

        List<Card> playerHand = new ArrayList<>();
        List<Card> dealerHand = new ArrayList<>();

        // Initial deal
        playerHand.add(drawCard(deck));
        dealerHand.add(drawCard(deck));
        playerHand.add(drawCard(deck));
        dealerHand.add(drawCard(deck));

        // Player's turn
        while (true) {
            displayHands(playerHand, dealerHand, false);
            System.out.println("Do you want to hit or stand? (h/s)");
            String choice = scanner.next();

            if ("h".equalsIgnoreCase(choice)) {
                playerHand.add(drawCard(deck));
                if (calculateHandValue(playerHand) > 21) {
                    displayHands(playerHand, dealerHand, true);
                    System.out.println("Bust! You lose.");
                    break;
                }
            } else if ("s".equalsIgnoreCase(choice)) {
                break;
            } else {
                System.out.println("Invalid choice. Please enter 'h' or 's'.");
            }
        }

        // Dealer's turn
        while (calculateHandValue(dealerHand) < 17) {
            dealerHand.add(drawCard(deck));
        }

        // Display final hands
        displayHands(playerHand, dealerHand, true);

        // Determine the winner
        int playerValue = calculateHandValue(playerHand);
        int dealerValue = calculateHandValue(dealerHand);

        if (playerValue > 21 || (dealerValue <= 21 && dealerValue >= playerValue)) {
            System.out.println("Dealer wins!");
        } else {
            System.out.println("You win!");
        }

        scanner.close();
    }

    private static List<Card> initializeDeck() {
        List<Card> deck = new ArrayList<>(); //creates an object called deck that contains an array of object card
        String[] suits = {"Hearts", "Diamonds", "Clubs", "Spades"}; //initializes an array with suits of cards
        String[] ranks = {"2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"}; //initiaillizes and array with ranks of cards 

        for (String suit : suits) { //goes through each object in array suits 
            for (String rank : ranks) { //goes through each object in array ranks 
                deck.add(new Card(rank, suit)); //adds the combined object from suits and ranks this created cards and adds them to the deck 
            }
        }

        return deck; //return the deck with 52 cards 
    }

    private static Card drawCard(List<Card> deck) { //simulates grabbing a card from the list deck 
        return deck.remove(0); //returns the value of next card in the array 
    }

    private static int calculateHandValue(List<Card> hand) { //calculates the value of the cards you have on hand incluiding aces 
        int handValue = 0; //initializes the value 
        int numAces = 0; //number of aces 

        for (Card card : hand) { //goes through each card in array hand
            if ("A".equals(card.getRank())) { //if the rank of the card is ace 
                handValue += 11; //adds 11 to the value of deck 
                numAces++; //adds 1 to number of aces 
            } else if ("K".equals(card.getRank()) || "Q".equals(card.getRank()) || "J".equals(card.getRank())) { //if the valies on hand are either queen, jack or king
                handValue += 10; //add 10 to the value on hand 
            } else {
                handValue += Integer.parseInt(card.getRank()); //add the rank of the card
            }
        }

        // Adjust the value for aces
        while (value > 21 && numAces > 0) { //if the value is more than 21 and if you have at least one ace in hand 
            handValue -= 10; //subtract 10 from the value of hand 
            numAces--; //subtract 1 from the number of aces 
        }

        return handValue; //return the value of hand 
    }

    private static void displayHands(List<Card> playerHand, List<Card> dealerHand, boolean showAll) {
        System.out.println("\nYour hand: " + playerHand + " (Value: " + calculateHandValue(playerHand) + ")"); //prints out the value of your hand and the ranks and suits 
        if (showAll) { //if showAll cards is true, (usually when the game is over)
            System.out.println("Dealer's hand: " + dealerHand + " (Value: " + calculateHandValue(dealerHand) + ")"); //show values and cards of the dealer  
        } else {
            System.out.println("Dealer's hand: " + dealerHand.get(0) + " and [Hidden]"); //hides the second card of dealer if showAll is not true 
        }
    }
}

class Card { //this class creates 2 variables
    private final String rank;
    private final String suit;

    public Card(String rank, String suit) {
        this.rank = rank;
        this.suit = suit;
    }

    public String getRank() { //getter method to get rank of card
        return rank;
    }

    @Override
    public String toString() { //returns readable output
        return rank + " of " + suit;
    }
}
